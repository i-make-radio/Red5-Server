# Red5 Pro properties

# Forcing a public IP address
#force.public.ip=yourpublic.ip.address.here

# Forcing a private IP address
#force.local.ip=local.private.ip.address.here

# Configure port availability checking
#check.port.availability=true

# Port range for UDP and TCP
port.min=49152
port.max=65535

# Stream name illegal character filter regex, for publishers
stream.regex=[=+.^:,/\\s]

# Configure the level of action to perform when the websocket is destroyed
# To close and clean-up the connection and streams when a ws is destroyed, set to true
# To allow idle checks to clean-up the connection, set to false
aggressive.connection.cleanup=false

# RTC stream adjustments.
# all values milliseconds.

# desired publisher rtc key frame interval, milliseconds. 
# to disable, change pli setting in rtc xml file. 
forced.keyframe.interval=5000

# Keep-alive task interval (used to check connections for idle-ness)
keepalive.interval=15000

# Webrtc Adaptable Bitrate (ABR) configuration for controlling subscriber upgrade
abr.enabled=true

# ABR Upgrade Option 1 config: relative to target bitrate.
# RTC Estimated client bandwidth.
# Subscriber periodically tells server estimated bitrate.
# This value is calculated by current throughput. 
# When determining if the subscriber should receive a higher quality, 
# the higher bitrate stream value is compared to the client value.
# the 'abr.threshold1' determins how close to the next bitrate the subscriber must be.
# Default is within 25%.  Client must post 85kb/s capability to upgrade to 100kb/s version.
# Acceptable range 0.0 to 0.5, 0.0=strict
# floating point number
abr.threshold1=0.25

# ABR Upgrade Option 2 config: relative to current bitrate. OPTIONAL
# Because the estimated bitrate is based on current stream and bitrate variants may be very far apart, 
# it may never reflect a value to qualify for option 1 upgrade.
# So we compare the estimated bitrate against the current stream.
# If the estimated bitrate is more than 175% of the current,
# the client will be switched and given a chance.
# Set to zero to DISABLE.
abr.threshold2=1.75

# upgrade      bitrate   threshold1  threshold2
# 1280X720     2000kbs----1500kbs or 1400kbs
#                           /         /
# 720X480      800kbs----- 600kbs or 438kbs
#                         /         /
# 360X240      250kbs---1/--------2/
#
# subscriber is downgraded when dropping video packets, not by REMB value.
# subscriber is upgraded when not dropping packets and remb qualifies.
#
#number of dropped packets allowed between checks.
abr.videoPacketTolerance=5
#checks are performed every key frame or 4 seconds.
# --End abr config section.

# Publisher jitter buffer. 
# Maximum size in ms of packet re-ordering buffer. Can affect latency.
# Publisher mux will wait up to this limit to ensure A/V timestamps increment strictly.
# A lower value allows A/V packet timestamps to be out of order.
# Default: 500/20 = up to 25 audio packets can be queued up for muxing video in perfect timestamp-order. 
jitter=500

# maximum h264 video UDP rtp payload not including fixed headers.
# Keep under anticipated IP MTU. Affects H264 video.
jitter.mtu=1180

# maximum subscriber audio/video reordering queue size
rtc.audio.maxpkt=500

# available audio codecs (identified by enum name OPUS etc)
rtc.audio.codecs=OPUS

# available video codecs (identified by enum name H264_PMODE1,H264_PMODE0,VP8 etc)
rtc.video.codecs=H264_PMODE1,VP8

# Ingest mode (single or group)
rtp.ingest.mode=group
# Allows adjustment to the thread priority (1-10; normal priority is 5)
rtp.ingest.priority=6
# Sleep period in milliseconds when no messages are available (100 max for publisher, 150 max for subscriber)
rtp.ingest.pubsleep=5
rtp.ingest.subsleep=150

# Group size for parallel handling of subscribers
rtc.subscriber.group=200

# Whether or not to pay-out any remaining queued a/v upon detachment or stop
rtc.subscriber.payout=false

# Debugging

# Used to indicate that flash data should be dumped to a file
flash.debug.dumpdata=false
# Used to indicate that rtc data should be dumped to a file
rtc.debug.dumpdata=false
# Used to indicate that performance data should be collected
perf.debug=false
# Interval in milliseconds to execute the perf collection
perf.interval.ms=100
# CPU cutoff value (per thread) to trigger a stack dump
perf.cpu.cutoff=70

# Encoder and decoder class(es) used for transcoding

# Opus
# output format is linear
opus.decoder.channels.out=1
# input format is linear
opus.encoder.channels.in=2
opus.encoder.channels.out=2

# AAC
#flash.aac.decoder=com.red5pro.jmfext.codec.audio.aac.JCodecAudioWrapper
flash.aac.decoder=com.red5pro.webrtc.codec.AACifCauldron

# aLaw
#flash.alaw.decoder=com.red5pro.webrtc.codec.AlawAudioDecoder

# mp3
flash.mp3.decoder=com.red5pro.webrtc.codec.MP3ifCauldron

# Speex
## Speex decoding options: JSpeexAudioDecoder - Xiph java and SpeexAudioDecoder - libSpeex
flash.speex.decoder=com.red5pro.webrtc.codec.JSpeexAudioDecoder

# uLaw
#flash.ulaw.decoder=com.red5pro.webrtc.codec.UlawAudioDecoder

# PCM
#flash.pcm.decoder=com.red5pro.webrtc.codec.PCMAudioDecoder

# Decoder class(es) used to decode video originating from flash sources

# AVC / h.264 
# H264PassThruVideoDecoder - Pass-thru decoder
# AVCifCauldron - Cauldron using lib_av
flash.h264.decoder=com.red5pro.webrtc.codec.AVCifCauldron

# h.263 / Sorensen
#flash.h263.decoder=

# VP6
#flash.vp6.decoder=

# helpers. x86 or x64 
native.arch=nar

# ICE
#org.ice4j.ice.harvest.ALLOWED_INTERFACES=eth0
#org.ice4j.ice.harvest.BLOCKED_INTERFACES=
org.ice4j.ice.harvest.DISABLE_AWS_HARVESTER=true
org.ice4j.ice.harvest.FORCE_AWS_HARVESTER=false
# Default transport for ICE
ice.default.transport=udp
# Perform STUN harvest (not normally required as mapping harvest will suffice)
ice.enable.harvest=false
# Enables TCP/UDP fallback. When disabled, only the ice default transport will be used
ice.enable.fallback=false
# Prevents remote host candidates from being processed (remote host on private network cannot be accessed directly)
ice.ignore.remotehost=false
# stun server address
stun.address=stun3.l.google.com:19302


# LibJitsi media properties
## https://github.com/zbettenbuk/libjitsi/blob/master/doc/parameters.md

# MediaServiceImpl

# Indicates whether the detection of audio CaptureDevices is to be disabled. The default value is false i.e. the audio CaptureDevices are detected.
net.java.sip.communicator.service.media.DISABLE_AUDIO_SUPPORT=true
# Indicates whether the method DeviceConfiguration#setAudioSystem(AudioSystem, boolean) is to be considered disabled for the user i.e. the user is not presented with user interface which
# allows selecting a particular AudioSystem
net.java.sip.communicator.impl.neomedia.audiosystem.DISABLED=true
# Indicates whether the detection of video CaptureDevices is to be disabled. The default value is false i.e. the video CaptureDevices are detected.
net.java.sip.communicator.service.media.DISABLE_VIDEO_SUPPORT=true
# The prefix of the property names the values of which specify the dynamic payload type preferences.
#net.java.sip.communicator.impl.neomedia.dynamicPayloadTypePreferences

# JNIEncoder

# Specifies the H.264 (encoding) profile to be used in the absence of negotiation. Though it seems that RFC 3984 "RTP Payload Format for H.264 Video" specifies the baseline profile as the
# default, we have till the time of this writing defaulted to the main profile and we do not currently want to change from the main to the base profile unless we really have to.
#net.java.sip.communicator.impl.neomedia.codec.video.h264.defaultProfile=String
# Specifies whether Periodic Intra Refresh is to be used by default. The default value is true. The value may be overridden by #setAdditionalCodecSettings(Map).
org.jitsi.impl.neomedia.codec.video.h264.defaultIntraRefresh=true
# Specifies the maximum GOP (group of pictures) size i.e. the maximum interval between keyframes. FFmpeg calls it gop_size, x264 refers to it as keyint or i_keyint_max.
org.jitsi.impl.neomedia.codec.video.h264.keyint=160
# Specifies the x264 preset to be used by JNIEncoder. A preset is a collection of x264 options that will provide a certain encoding speed to compression ratio. A slower preset will provide 
# better compression i.e.
#org.jitsi.impl.neomedia.codec.video.h264.preset=String
h264.encode.preset=medium
h264.encode.profile=baseline

# OutputDataStreamImpl

# Indicates whether the RTP header extension(s) are to be removed from received RTP packets prior to relaying them. The default value is false.
org.jitsi.impl.neomedia.rtp.translator.RTPTranslatorImpl.removeRTPHeaderExtensions=false

# Dtls

# Specifies whether {@code DtlsControlImpl is to tear down the media session if the fingerprint does not match the hashed certificate. The default value is true.
org.jitsi.impl.neomedia.transform.dtls.DtlsControlImpl.verifyAndValidateCertificate=true

# Indicates whether unencrypted packets sent or received through DtlsPacketTransformer are to be dropped. The default value is false.
org.jitsi.impl.neomedia.transform.dtls.DtlsPacketTransformer.dropUnencryptedPkts=false

# Maximum time in milliseconds for a thread to wait for the srtp transformer to become available
dtls.ready.wait.interval=3000

# Cipher suites for encryption and decryption
# https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices
#dtls.ciphers=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
dtls.ciphers=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_DSS_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA

# AES

# Specifies the name of the class to instantiate as a BlockCipherFactory implementation to be used by the class AES to initialize BlockCiphers.
#org.jitsi.impl.neomedia.transform.srtp.AES.factoryClassName=String

# Native extension for DTLS/SRTP using OpenSSL
openssl.enabled=true

# FECReceiver

# Specifies the value of #FEC_BUFF_SIZE.
#org.jitsi.impl.neomedia.transform.fec.FECReceiver.FEC_BUFF_SIZE=int

# Specifies the value of #MEDIA_BUFF_SIZE.
#org.jitsi.impl.neomedia.transform.fec.FECReceiver.MEDIA_BUFF_SIZE=int

# KeyFrameRequester

# Specifies the preferred KeyFrameRequester to be used. (rtcp or signaling)
net.java.sip.communicator.impl.neomedia.codec.video.h264.preferredKeyFrameRequester=rtcp
